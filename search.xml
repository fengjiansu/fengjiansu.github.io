<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Digital-Ocean 使用指南</title>
    <url>/zh/null/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="89e5f855c4706e8c66b2b1788a2d0e3682aec83033af169105576eacf78f1a23">87538a5652390f7d364eea5dfde7ec2fd285e897701a81dd1efa7c813a9b2bd66a747ae78a031b7d211793a257300da7b11ad24d186715b50b2e35dfeb3c93d798a15b3c08a20eb51f61378ae76910d2771ea0c2ce84a4e98ec83e47f372417a5a9735b59d45363211facfa7f224b1bd8097c9bedccadcf00be46abcc5c2a6032fe2e863985b592d37b805b32f3b459ce56398fa82d054ab591a1f0f1c0c2f918144998b53a2e937aac957641b7b0b3af1595bfed9c094df1592bd5d05ee818326b28d7ed38cde30e86929ffb3b3f2c2c4269911a3848824ceee192602363215c9a310026ca90f8a9304b3f84ed8a964cc86fac65f0a096cee8b5bc9b139146b7f7f3540852e4fc73ff2bea91e1b10ca2272f0110b516a6ffdc4a9ebb91cdb1debae677ee14c798d5f7f826c414d5188dba4237d4218ac4d90e7f72a200a203c41c0734de4d9fcdfc0f12666560ff755e844adb8b455c72fe573a343800f6b6b62de9feff605a8a32072de02573af5e80a883b62e2d4266f7c8af69833301a5e9fd3299849b55b4aff1f1d0335764a648905d31f761a86135e0affd588dad636067dc5bb1cfd3e34ca847e758a41a249616c0f82967502d757a84dc1ba92efd2a97be04fbe70e36b5aea2f9d8a43ebcbee2cd0c14a5a87de9a64602d2b897750acb20effbd06b7d823f6d4c349d36203d876e26e33ef7f90f5f7f560c130800a191877d253ac8fc29afc1d3056606a896a5d9d4f74b8222bc1ec60957404c8065d51649e5d7c75cd4b2e44514118af3601b88e133f15223a72a198ca11857b17f554a13598ed3216d4b76dc5192ac84cc810cb8993c6923e1af1046961feda13420b247082f115984ae394598b328b7bf452bd5698c0a2bed3d908f47abcf8dd1c701f5597001669655e539673a5858908f1c99d92b13eb654f129ca5a0f2582400ced366ed90d303dad45087d7ec32085e8677187bffbbf20bbaa516c5066fc21671187cb99dd6367a9d85d483b97aa07436fc1bdfc77499bb16e23c6a7c50b89cee6338eebe51cc7c7a322a0d7cd6bc131547dbb5e617be012eebf12628394d75d06b879fb13af39580611c77fb980863a6b0d2a5b74c389626196a4acc37c01c03a8df2b766038c4ec3416bed7b7bd5b7a08fd7a279f6d7d6784b21fc53e6cf09c7c8e6982c5df38112de16fa3d122c456cdec444e27d11f55949451847e41ff32985de09658f4760a6cbd133556752ae267106659385fec17ce621818b419d32abcb87229c9b83a7f9221131db0cf9122bddad63e67ce08d31458fea63ce241a82f0dce5ab95a3838ae77232755ad0e960372d7cfedfdbb9815ee4519461b96885094c3804e4b5a4efed50929b4496a24a06e2f820e6949f207e61026a2921766ca3283b96574e07d2174dbe5878c2cec95fb9dd3f41b14ca8c814e8658746bd273a4c7818c5cdc30a5cc14eba11416826f076d1f377e755b30755ecbbb06c35314fe1ece0e0edc4cb74fdaf9dcbc4800f569ac39aa03a811138948cc01d0f8d44d4e4644926a2366accfaeced1eb422ca4c1c2d25befc529f7b6870949504214171fc7fe787030fd874fe7ba18f3d38db9c25bdd0c83336565515507f41e4a6914f5c88ccaefc2f5ca6ad91780986b49c75e6de3e38b74a935e11821c09b28d5ea4e69f90daa798a9d105e4b3c741bd0fef2f036df1f26a7d05918abf068f39f731a17533b4c6f76c68f143d7236f7af7147b947ae633ce83e40862245375e54e23381949df139ec6cb2bb90a94f790a1b1f448746bd275a67902cc1ee74928053ba88dff79f12a4f0f6ca16a64983eb38b7f96654e02aeba8571d7c2df1636e5132e77d245551cb8f25b1aa411d228b15cd849fcfde987eac330b96645de9fc4fb9eb7e22dde1cc0f84dd29d4d02632028ab748c1100adce7bd3593fd078441ec8154ca0959d2cc61977d79656b86c96229aeb45e1c019bd0a6cf7c15d3a69d61b4d348cb36606f38ac1f5bcb1db075c918410d0066f3a31c629bbe57aa79b1ec506e6086858dbac6019f929735894b9f95935b5918239999e6bd180357353e617a7b337fc8a1ff1472c751432118ee071535091e3b7ea352e3aa7a04364b989e9afd1b197f63a23ca4b81b1cba8271dab35575a0f25da32c2de94927ca4885836696176985272ca9439a125350572fb66f590c850834127d9011f0bf7852399e53f2192b4ea5d5b4a88182e0791fe793664aa53fdb462c76685e11ac2c8010e07beb8594f590a94f80e78b42f4eb4363d9571c524b93b5cde0d5188776834ff2d6a49796102b948eccb14379a84f505ac485f92d04c70152ec236f5a432eb7b6ee9478eb6fdf983f35af46b6357767e413791a4dd135027620f06b591bb193aa844e2a40288227ef2ca7876994d55bdac24251c2c0a6a879cf887751aec19795eb870b8db5abeed9981dcb860d4dc7a1dcbdd73ac71c83e7a41b5984b8cd62e6259b0eb7d1c3a1d0c0c13528405ad0d4a854157640d630e14fb107519cfd1e0ab42cbeee8d9ca5565160c56bf207ac1bc965e37e72b1417a12d5e7fd75bec958293ef1842aef3be85fef155fed1dbca0d1e4b4e4597fd3039f50f858be8b0d35ccc446ec771e35a4295ce5d16b5062bd5d11f86b88ec8c70bc64f3e401afe11ab1755c2b73e7dfe69737b0bbc5812abbc821d1bc5f1f0ad9d981447ba9361cb121522af325a49a101263802a17dadf41d2be18310d2aee1f618aff248deb410d1da51517f8b7ecb8283d746d8d16c1e3eab04dbb1049f0ac24c36ff92f5f0cc6ac1093ad2acf72a7dfecc22f9fd8083c36993c0319852c60d74b386a4e3c3bebc0185771352eb9c719a8e0a29da4002c11ed746cbabdd32e229d9dcadb4b351386fac68bb752464f7b9910ee992870b2af39de362ab95e4955f03f15899e2c52965fba4593d989ba22f433088190f1dbef8e9835184fbf1b0c2d2fc1ed5ed50a721b26a9277b478baba8e944b8dae206855a46b02e214b287c0d1d5bc56ad3241748243bdf3942c17f1dac62b2db36292e1ac758090aa4e5b8883619929f39e17bcdec43da65f7c2a3881703dbd46c9f612461a95d9968d0992983b1760d033994870fd69b5e9754eebbb08cef84d034ffa7251b7d474f526eebdc93c1f27723b5a948d0dfe276b72d887fdee1ae348f89896b0d0e5ae6dd675dc7243b18425a516a6f1e7004bc5f486755f5244caaf8acd68ad1d0b4f3edde3cc200188d6ae03f341545aa567309600245c090f4a22c00bc3d171da2d2cf936202e8fafd620b727c25e47be2071f1e7654939cddf86e00d82c7c11e2fe1bf0861a74e64f67bf0c53cf33d1b342f7dc44fa9105270b7ad60483a9155b99d5303b953597d3e421814cfb60881ac605fac4546ca6ee7cd5d243fd3895e2181bea7a9775f0598532ea6540afd88e350d46cc6fd02b4314c3b048ba5c03c4a0bc82c01dc24b7b78b8f6972f96862f288c85ceb9040871ea99096b8984ca97996a40e1f2966712c6c50b20edca265ba076569d9d2db8fc6d36d1bb58702716f21b7cdfed8af50f8a106120754d11b948b0bc971d058bc48a142e1692bc7b68c50083bb10bc419ac527b47a2213c3c75dfc696ce0f13d54620953cc284359951d3438c0ae548b8c6768033afd669a7fdd511c0f5ec76e5c78d487156ec0d0c1ec16a695856c95d5922652dabf7673fc592208ac0884bae2ea765ae364089de2995756f31b766e6c904a9afbcddb2c6fb7c9ebc5d031af555a2e50b3e45200fb361af11b47d1848d24aca0d2a5ffaeb204c111ab0e0f22eddf34d526f1cf3bfde6e7d4a64397a1d2c435df19f3ef9d0299f991677872f102bc513129c8b9ceb00cf44b063611d2706e7601427d7c9a4d441ca690fbc51acd87308fc748186d29df2a0987c35bfea33cb6726e976b04551d01c152f77168bdd32d767629070e3dc35d7afed0508d5f0cffc898c6d677236217dc7877e15e690abdbfcde4d3a011fc55dab0b2c6104ac0fe3d37a458f7e16d8b0108682b5450e32f978d06ffa311046cee330af913c53e9fdcd764946ddc3479c1e299c32a1404be5d296c83d9d1bb54f1465d8afc8c6e70f2e693ac61bc55dfe2fd9cf2ab20c5018dc84f3ed7e4695769947277042591307a119b0e196695c1759b83ffcdd22b1f4b3abac891a93074292e8cd8336ba48225644e4b144eaefdd9deb731f8c2af06a08dd956c16a19fda14da1e051cd6fb70a1966f3e864950afa3288858648086ef1958b06c548288c0893c6cf8f5dfc50a01fcedb2e3fb5e65f752f5e6d950c2b3726a0547bd8f99156f8861522c37bddbf10a1319e870de207ed10f835b609cb855cf160fa26dda32cdcba52c8d859f5562a92944d942dd8cf4610c801dbf620d18bd8863c9a2123db364d2b9f15e8be863c6b277e87613157b4c71d1b97f5ced6911a11ee92e1bf89e6008a24572eb2049baa6546d4b2fd47164dd1ad48ad8316a244d453eb01ea6f9adbf09ac3086dfef02ee4781df148d39c9bfe422b62db5353bb205393c45c67fc1e27cdad8892fc2798fd2372ac2caeceabc961d79157dcec73e24a751fc092780ad1b7836510b82c67e545c5daf4c0eed707afe6a4e9de93618f9a8c1d640f599c67e2c2a1a607f7f1355f6fc3d413b71c19bdf5ad560ec7a567725351f48be344690a883f313cf080929c952b632cd7da6b4cec41e3d2518f0a2d5a81020ddec8f34db104c7fe880770864565bcfdd73ff94aec120b2dc82bad4f5f67e7b99e7600ae6a47a619839c1a295b9de2ad514a02dca27066066baf6495c694665b3d4b54aa86b60c755d85acc622a6a647e589d339f45d2014793a22ff11b874297b05da5853ea549e37ecb2a919219e28ae41ced010331ef0f1f2ba81924b29ad86e774d6328f9a1911dd84fc73214ca38cde297c6d67021c133d4d98d12db077a4a1cd45457da24a782bfd54c93af4dbf6e5c89faf390bb815a4602d95b117b8aa96c83349b397f0d8cd1ce8090a350e4cd4c569b320f5dfc6a03e275108c82165bda7e1a1805c8aff5040430ddfc7614feae5c373df32cef6b2b35c76e9d2b80cc34827b3a67ba7a4a787c29293581590c44ede16b802661b28c63379785217d0bce0cc15da9b96d74bc217fbf5cac41e5e2bf165905e7fdf9369c5016cf56751bce238cd643be81606455ee4e001d44591baa39532cd4c3ee91e394b77a79b4da2fe60762026e2ee010217fa891722ce70c8eeaa08d9c92d478305a1b46fe06218c5a01fd5d81940a1f5c09cbd0823b77c4f8f1cf2e4954775f1fcb83ac941ee16acaab3c06c60044ffddbf5aef309b730f72e6d81669f134eb7a5861c9c4a40f1d2c6c8a0f655c576f1b12e49e65651edd432b5cb62af532a63f7b2f1e184fe7fd7efdf6afe81ecf10cb39cd58fd58cc632047577f1b8554fe31325311d2a0a1dca28fb24e82d25a341ec733caba957759b964fc0b99d5553ea2d248f1609d3b2a947755b5cb5c08b09910cd049d9785eafa93dbb02a9dd61596b741bcec00a9b8c8e4e2e660fcfaa45fc37caf1f76cb10efa9931caa0754210d702799c899ad6c5c2713b0424454cc3bfef676b8fa29a54aefe53eee066e63724f1de08b20fa30b70df41c6f8cb32b0321ed03ca7be1a4a9899790c5fcbacd96291a084cecc2fbd1cfa908b6786da5f62ee9990589f3595d5da95f35cde28c046eff4ff08da54af857b587de420276d6a0ea5f922e6a6f04b3631da05062378fae7240f793fb2779aec782913a5cb50092534507e5c7e0234869e8104cf97d1b10880b299cb3bd9cfe129666215002c560e9561ab2e417da2b5bd911c7ecda30c1cf509e2e8181eb3411014fae917cbff22cd640d88fcfa1a670c72a412258e013926fa2df9db96ca5c1124a73ecac39dd318da04923672b91dba05bb17b2d6bb475d2fa22b6f33b64b22de3e90d90d7f136790c117ccbb8dbb19d3aca122b9391cf739a431a9418de4490d5e53080bebac783ea9db5f69a59496b86b89c38d170c43ac5b0078fa7f2e003faa7cd50afd1d98692c0b7dbef80023c12c8b848f56e8dfaccdce3ad6e98eb2c3fc6a8b34d44a403946b64b1ee3dc7896629b561073c46837ece46ea0b23deae5d58f96b635b2e5bae856d7f10f66656f05db4587691e427375bac5886749461b52e140c7b448095b4707cc8562b27f76b7419ed5f76c769549896e09ea5d57aa20655de37da84ba317503bdd5b110636acd100f1208c87b3fb0189ad6044c41fd71949a4a0e74737ddf37012b533278ed1659843de359b1bf727a7602725af70253090fc1191f6743d7e4c91ea87adbfaab8e8678596e29e9cc5c81625c599b3c30b5e9b45e94ccc7e7d30697f73e15fb3dbf0fbec82c70a21347cb9138783c331242abd0312cd80eeeb95a58b8c64e427138cfa77f4f64d5a4096cc5872039864d1919c153517fadda6ac3a27e305175b0e5c37254393b9451e05cb75c270ccfef92326dc4173cfd4af0fea374d5db10c987bf3dc2bbc5f78deb255657c0e43867777fff210d7d9738a06b62b61f46261938ae1df00a845c6ece193d2e6e3108f8ab4f0299970f238ef3924b4630448651569cdc884887c96ec35fea786bad0b935310095e26c5a582bbba0a1115e42ecb84f6f24e11b62d86c53dd3d5dc1a2aaf785f88a746c9894d0b25e1a06bc84cadacd5cc246ec32dad0f75fff10e563dcf71ec5d3938e2370cb96da36f4e7deeada65b3e0242cee10e031427f07415c6fa93de5fded85737a59f88e299a20c3c11b0e7217821220e7077029daf03f07fdb35591b3a8baab3c8ceafc17cb75130a1d68e374b07a66aeaa0d9cab0580dbb2788b0429ec72be70066ead3fd5a71fcdee70e7b7eb33cd14ed661fe075382352c620699b09c542ce061a137ffd1e259a679845b9c9025dd76691fdb60a01a488d84ea542dbb6476169dc267170e8f74684341648c462d3d88d4f53b1b2676756820ca02f672d8ace775f59eb83b771cb5cd70798c5738330569a4eed06be786b4d463e2d4dd1b57dabf80f168c671f1866dbe815bce7fa93ed76facb29ff1a9dba0ade53cbf0cf7e4482c4075fa01962aa3bdd2aadf255c35b55d19463b54d6b9b889a6c86c896026038025d2083f30dcad74479aaa2b107a2bcdb527fca90e272efa0834b61b41c8eafdc7293845367cdeed11d0b5532c7b63ff4de85ecc04ef4fa996823416ce889d9e4ae0f4435eada79f58c2e21c471dc45888419af65701d369ee4b6b931dc04e9e4f71916d7f42a00ed55ee2e277bb8ed94673604b7a3f9b951268a4bd94679e1315da58ff35b683d46ce8a03784aa3e9e4869c5b2bcca87be0c537653e3544bf9943b937a2b7bc95b5daa5898d8fe497dead8787bf2b58644ac5825b846b7a460b5180d1213b3140e3320007bffb84ccaed0fcf7040a26fae6167349862852fd55de83de4656abfb7a9c30680b3d567673106b8a37b25fa133a564929f4c43c8133b4076770c0206795d89aaea42bb0c366e65b369ea567d60dde34b65152dc3da8b4b756d0131d7b13c30f0c351b078ff35619cf21ab743ccfbdca287c02b697ddde3b6708182cca14922c4d7e340621acb6011ea3c311452ffc68efe0fb9ced64ed2917bd1da407c1e8e6586546c5b3f757678539f57ba8b858b8b01d8e838f0aa3b93c725f432cc45eba02440387fd67fab1b6b83980b3bbd776b37f56d35e3c2b303780d16db6400e9f1a3c19dac3c50171a74d0f0a023e2173df228090cefcd8329c40c0c3aa326004fe72b09570f34cb45f7507a0a7416451c0006575fc568ac43af14e41c4d9555c6d179adb7e4d4f80dd6ab52f6c2bd52f8ff5d0769cac55bfc75ee81cf65f287db6b2351fd525530b0f6fd5d279186f8b7528bbe51b490ecc5f3506a95ba3a4ae8a7f3bbe81c59a3731a9ebd867c32b6afeef35ca324d9b10a7d9e3f77f91a6b7bb20d1efa8da23870d78b6d5905774a3ac667cd795587909d827362881ca63bcccf8803cc319c571481891d4bdb7c5f9cb4fa538fa891d074eb1fcb53ec5c7449756ccc7f39cd04184f21a9d3e8ec1e48a57ea2c8e97f046b7e1296540b77366bb9a7bcc05b4f4adc67ebc3887e663d91261d715555fe0c70a7213d5540b665adba16ef6fa522254a547c9157451f0db129306da31712265ec3fbe28b25904e2ad5c110c033d242e7525402b092a870c21367466f8bd009cc032af575c5c65b6b573af5b0b90322db015f216395d9d38066395084be713b7d7d62da2ddd04ffba049a92df0124025bc51d5b8fc6fe447dd38df3aad5e69b0de1ef4bf7d0a89b9543a8e16e52685cad8cda518a3f3ca61ff8c3eab5015758af54edc3f238916804b8443bb504b94f5bcf201faf7cc33984358555e35a93cee9e8b2b4e1232b42ce278096232a06a0e0b397255a1d3c7f014b549382eb992790d09ebde5d571e41a65dd4481b9a06efb98990179632a8d28e0f7a62772319c6870b0265ce8429767e3907a298051c9b994f11b3dc131c702ed85599095764761efa86f04500e4dc5b4c94e62e17b5835efc1b0939f6bbd94de9785b339994c38d7de80e5fc3210fa7c9671562f2e660bc6de09f17d6eb9e1b3709c9948af96cff117f0e1dba1c880c1367251df5f6f067a746adc667947e402bd8d4924d75869f11de5827228e624bd89524ca4c389ecfa6c1e51e21431c2ba41fa10d1961118081b9eb90cf0b757016f13cb133be06df61d2cd2ac15a564b1754c674a0c52e7792b87e5209910970b85cbff37072ba843927020d0f6f779e41a7bfa03c4af8f63e2a5bcf962fd3bf0782b9041c2431767fab16d35c8654771873a4adf1eb18acbc9a451aa66dd04a0965fc4d795f64df491b5fb592a108460a93b5a3d80bb39560e33b2c167a032db1571949b2c531b59c96ca88d01daa727acbe3e031eb44dfbd997dbffbe3b6fd7ac00c459aa256e86e252e38093ee759736dfc5158838dabb59014cdc6f2e389b6d7eda0a43a1db8cd94191e931660604edb72d81a96fa2b98caf110d579a483d255c6ed1c11a1c01963d46f69a486de9522c494d3e603885f579763764ea08fa23323ceee2741d9418b14d20bfec73dd646889b6b110fffc5f1be9765fc08c13f48e19c4840d950cea59b760e8362a90b456032018445b9c3e3d3054a0b252eceaa1358847cb8e258f04e60742249cde2f59bcb7fe90ce34a4c0e9d4cdd48bfabbf531930d2f628208f751b8ec48d208bbed5acf2950fe7d934796bf2bd08f8db3ea2d1ff2f4891e0e8f25f41557869a362f6108d75ea606ed0f45bd2e7b0c310e48cec47cc0e5935889939f3c20c44f1a63a0b3419681f618f11e8b090dec020f23336d37f5ad3600cc1485c32d723c7c3b930dbb6bd151973d31299f0801f567c18201be8c01c77b477c7762bf7b10120a2b6ee3d2225b6cf4094e348d2371a20469a284bd343cccccf7d5929e00c58fc845d7bdd81ccfbd79bce8e4eec0f6d2b6167eb13a9055cb47c135a00251ef6eab85fe68b5757336e2b48920306afdf0204d6c486c3f2b558c56f4b9bdea5b0ce071618e06cfd80a5903ea279973f4eb185a82643160c0e97d08e3c6a2fa9e1f64db8c6d7df1ab614cbed648413a8b5ddbab7323e06631635265ddda8aec266748e60d34b1bf9c5b571c9edf8ce663e31302b8fc94666cbc41552e77928e718d64bf323c9a5d35f5e6da5b219a154dc1ccd13efd3d66efb0ec00e2eaa8c3cf853ec299646bb813246d588bc886417653236d331b2ac34b7c41f6ac3ab9ac773f3568f5bd5cbbb93d7099707f6fa7c4c30d7c1b7433ed30d55685d6c4af70b2a54d436b65d71ebc95aeb50ae2491ef0312edb8b03a35fd471f1a5c22f5bcfcd639b82e91f4cafa0c8cd74cbf4cc9a5041682d4b6a007022d45603c0c2e0184ba8f4ed3c62a20947a988b9353538e6538b73b2059b91684fe6a4ff5b7ab144fe685b4eb34c55099fd3c8f08b10aec472ad891a016de8705ea36f0f6efd16142e8e9902627a71bbb602757163fb4ca55a5c85dfc6ad344e73e47518b923a77592b63999da87e02e46691b7b723ba3eb730f174bd1ee738ebe76efc584586fadfb01f6217292066a3736ac14c7ab78cfa2790dbecb527b5b6d081f0ed08d7463c73644423f26d0e916cc2838b63671194a82cd4b5925f252a352f916776b660a73e83bfb591b1b559003b813ecc857f42d384c218031b69eff3eb5f61f59d846bfde0271ae9f17627c401e9bc5c0a0867391a5434045340158246ce41f96454cfc3698228d1bc2dde03467faa6c87ec613fdcaaf63cffc954a1a9795f6903b8827a300d3114c5e6610e1524324f7b17007c53524af731f744e08dfb9713961d1bcfd43d0bed5b94abb5ffd922cc1e214a83db9c329c756ac4617817c51428fd5a6289f968f2bcf6fc074eb7802e879375fe13004693a25df8b2412e48810fa0bf257df3c56a68cd283dae9d394bdc7df5b8e7fdcc89d397816c29579f058860f969513e6c5ab679fc345ab913d55e0f6d9c819af4d07df38a371c6a08c06b00d088830828bf5a40a294bb9f8f8bb5217499420049ae6020033bff32ebbf5e9c2a940aca81ac63e6cc341220cb79fcab0875520289908cc47461363509d879eb6477e6f67ee8f1b024badb2d557c569f375a9e524bcd15f35d6b335fc7479c3969d56241b43f0487b5875246885fadd0c6feeca8b18be815c408cdd3d681cefb6a00f83795af98a5f48d3ecadc73bd60313266cb4787e068189342ece1a8109e91f91be152a63f7e97020aee941031f9ffd561caa5e94a0c4a018e00563f1113e986cd49cdbc76e9831e56ca14453feb77c1ee7d36ecd47435ab22e17d3c55a388c97fb4c441314b322067a21c9f2f4f1b1b18e55a2fd33731ed45b6d0ce4d8e2dfb6af403626084d2c75529164ab412baa0b8a27c68a3dd9bd372b4f8f49bd4a43559b30df02fd0d6d20616c2c0d06e896fe8a26450f35bb1c7f7f093e9bbdbca3ae4fc8dcdce354689208a95a7821510763ede9002473a920ca707cae3d6d032ac2ef994e79affe0bac5106ebda6fabcc36a9a6a578a141dbe931b4c80008c23e2e5bb6d38774ce6c6f5ef764e0382407d198e46f7f53cfcf4102cd800b23e21c736ba809dc593b850ae89403299cb4f8290c8fc42e9e383da4ad006d952f40a6c02560feb8b9502ad0034656a41e7a6f630a1cc18a8f342b7c85a93ce8b1dd801753ccb5e7c79db0af3875822e86913229130c47147ecad02e8206bd73cd5bd2507322bb38f745c7ee2e8abf42bfe91659e3ddb6c85d9c044a611064aa77319fcd5b3ced2cc21248acdb076196c9b98720ca30de75f48c8e482cccb617914c7ca2ed4c89923e6f5816d268d0e3e0348a29b330b835ab6e0575a6e1456b4940c192d7afa000764bbe6f65caac826a32b221fb3986ff4f2540dc3af52d47b14d26ae0b07ba4aa9f70d0aa3287fc838d9bacccb10b5c0e4812a3b68b6c2aeeefa67ed62b7062372d048acb4770f5e644225386ecf113390ffe4249bcdaacc8c50812142e29271207198621641b238d4f8ec9b0d07df9502bb67e8c75a3cf047d215b5d9594bfee7219de407f457da0f35fa20ff7c53dc60d972e2ab20a337ec8024773982bc6a1164c0edcf88dc5a0fcfd0bfe77d49877daefab67cede61abd828e19cf126e6aab7ef70b021acc6d85543d1d41b59cc5a35320ec3cc38ae00fd2fad58fdc3981b838eb21276f526bcd033e02307c63c572a265a2cd8820cc87121eb1f52df941b3c420bc609ba5949a28e1cc353255fdafe107a9f0fba69f1e9fa58be487d44badf109aef486fe4cd1b1a9c9b6d54022936ca4ff0115b3313e9e517d17d44c46597ab9e0d15f5f97143fdf6302e3002eb680c1b9670c7705bc88d4958bf27986187c0535c0a02bc9b60efe5dcfea6e4d407db0376fc982c09b23d6e3582ea6393787e5484cc30a549288b6d93e2b0ec70d82f2461f4390cfb77f587cd43ea8f2552388bcace1264f7e7f09b44c55eb40c8fc0370f913e126316c128eb694de29cdbca493eeade331abc478ef451b961576a85ad79db757834f9136dbb04eb5bdb109c6d8cb1792329f017039bac47a0936e766cce1afcaab656231401b87d9cb8dbcd9a1fa7288e6384ba8b94e0ef9f2c5ee49e9a36262169b8799aee13e4f4222ad519cfb7015704cd89e615b710e510f21537433c2e115878de04ee52cd6b3cec93429e48195a221d34fc9e3bca99c65617b242505bc19583dd04d574273cbc3de0d08feea07cb802525bf06dd884b62973c1a3d2886c650487e1649ea3a9feafaa9316844895a87577bcd3fe3000c02e2bd4e0786630f434f9d73195dd169b4370eb83111751de1b6b2595842f2915c1aa3e838b22f8a6f54782964fe0407b688110fbe78e7a4690681baab91792e7f598381644e69d70a860586189c3007fd70404d549d65cdfdb6ffd5e647a94c7063f7a2d474fc0afe1ba1f1cffa3261e12168a55a012d84b473ab776ce7d4f492ef05a946c32d7989ad704333ee39a73fb79c75257b5d71fa4a2b2f9486643f3106041caf57970fb038f4327451da86f972f4d6c5708622cb5dd9f68d8e3a9aece7f7d45d71a940f6aa8b44035ce22492852f0d82df041c4cefa74dc4e69f026705d89ff0631de2f229929b90864ccbe47c97c320371234f9a6d4772917c9cfc652136ea236123b333cabe24d858c586cc361d224f45ed379113660e90498e8be88376c4d64c7011964f535ebbf9767e246848236f93aa629c11ea7091464e8a0f892f00b8281bf9ee87176ae4825ea28d170eb604b147f5365926e1e0596694094f878dbb9d148be14f05d324aac5cdd1c9d637093bac157210008ba85b0f2fbfd98dbe1cdf4103f2e6b845e65d37e9b3b48add9201f8236eb7ba5d9f0eac959d1d008a36f00c864fab97bab3d3ee1452a5a8a2324931072284fbd5a120f7b47a4036deae3bafca9df5ca8b0b058aaab5d20ba15b2fc704d53b47da2a3b62db6273ef1b36e9c733a425c4af4176c5d9bb7cb805b7e1596fce31502d1320101f29b4c16d5b3cab37c6c0481ac43fdbe62d244e7130eb8b2ab6f8d75f4fddaacf76e42f946142a1323290a57a004bc3052710ffc64244a19812b73eb276ab2c9b82167574c04ecbb84817cdf6413203df3f235ceeac2855f14de285c80d29a6ec14cc5d8e6ae57f1105ea65ad513c37b7189057c1a7b612136a7807853f57cfa99054ad197bf5cfa4af144762f79ef45a50149ee1e3ca8073197d2e11c156d7aeb2fbb45ee1f96d9ba9980a3ad84f2ab55a7d6d5e1dd96a375425d4e3d8721984b953de8b124a6c632697ba7414dd3340916897cf8cd654534f4f6e095a385072e36ae1c2a9406d4d2ac2bb601f3878b25b6918b516fcd57550676b63808140208bd92eef872de8f049be8f9968e2279d6f27052512c58b87814cc595b380845a35580c9864229d584cd7e484eb98f37687db14979e3009991a3302c4b10f1877cb1f24ce1fdc19aa23d05c5dfb4422626e833f673764d078bf3aa9fabb4b998a16b2a08c11e56c97cddd101267ab061fbfc6168dddaf6afb4a690dbc925a8624d185684e4151870591f842e8831977e113f7d3bc5132b853335cf720602b5898612ebfbc96b65aba0e6d42ce326712fd0f01301c07b1abe648e70e19deb39928ee075c2e8952eba08ffd0eecd25db22f99e97479883cd630dbec84f6c28e20c326397d02a56e1e4dcd9dc0709042336ac3b54e0f4e2e86b9ffb06ae66604377d5551d190e8a20abfa29ec5a2cd86c96f144c89ca7ba0a60781d74e44197541ad952d87796415a0b2123d40e0af630cb809f20fc4292ec4069bbb9a9d0e1a614bbac3f5cd0f404fc4473f580f67fe2ad8d9d7fc5e7694fa395ed9f2479c24a69a189080716cc4b844620eec6d84e755d764aaea6e0e915f1a31bf385753adaa8392e80f0791a5dd57a34fcc8b2b030518125eddd5077ee7180cf304adff8b85269d9d386c881674b30c14884414d97a1b69dd4efedf623d42e0aa3c8fbc81c2b1f6c027ba91f3152b2d7704cf344efa1fb1be8695c96d8aa645eecdc307cf26b154319894de3cb30f3113b0da953176a66cca3f28ccd12b694af43097ce021a766de056a61bfca38fa67479a0378938849776441f12cb42b602616afed0aba86955250d6f4e503243ec3c7ef56ac380eeafa0021360a8ac05be0e31230eadb5c49b39e46791244f84dc3a99739cc9f0076809aecb25ccd99c8e936791c16ea1b4aa565be8ba9bf9296c6e1aaaf4c95e5b257f88b8a0e75f6831150ee065d94188223badf1afba71562d3d57aeeb0e17a5a349a1f2f3ecc7555c919ebf6021a860cb948dadac1f74224ec3acd094bd91bf6b990f5d37fb960fb7b75dc21fdc810bc37546eefac1a98d30ca106642c6dc25bfbacedad9a43289dca800d3d7a910570de44ecaf2e68cdc9a098bd7b75adf525e30ed3fe1d9deead13c17eb8db55e0c7fb0fd4d728f76fe48363d0596bacf89b9b5fbfb49426a0e52b5c91ec2d66cd47e7985f62eab982901ab709b72bb406673a2f508d581ea66ebff9384d7629cbc5f4fefd904d6ec2768d6cca7ddf46304432b383b282e0c0733d0a5569c65d1cb9e221a565674e49535040e9622f54d0e07e8e21d6198c73d4007d02f47bf09e6d04e58a664d2aa7af904f01e51dcddb91691fe53c74700c93e40bc783c0f1d3c11d5c8ee8ecec943ddcc751c49649c3c8965d69cb52f311d273a69e235355f4a88670292785dc3e8dd0382f7f492228fc7e4052093254fdd1b38baf988bc4dd1e39e8aad702d0653525f6d035751e343efaf5bbcadd94eb3ef0693193c2cc8636838899f1156170264a5f9934f974deb853130d35d740d22e0afa6273ccff88bb5eaed1bb325bddd7def283f31ffe7813de461f027c21872612a76ca4695dfc5ee2b56f19ccda0065c1d95e8da2f9c0e5039c451ce94db17d239e33fc18feddf728d8e9153178e0eba02329f71991c59a9ebe93c514631ee63bc0fc34baad7bb38fe081a8fe349ef093e56e5eb123e2ba2419684e84a9454091c49a92f42e13dc520cf726b58dbc1188ba6b8150fe96178b62380276589c7161d909589bb5b2e8921e817d8bf9f2862952a83739366d16d5ed74d1eb285e3baf6ac591577f0e952e799922701c04e0fc7478c6fdbf3f5af97a09a909bf27e19518503d75d4fdb2ab01a08f6e3bece23ab4abcf721663260154f65872c53e1e2b8edab0b2fecf3d28300ae68c45c79f3fb9923634a5bcf634ae6fb69907a53b16c8f0d0d96e337945ab80e7ffe8df3d446e3dd4a5512274fade7f2d03a8f6e727d133a6e4d96433bf0fd55a59be4e555dc10f939dc3d23bb20f8d8bde6f99dfe689745039a8a4db815653877e1151cb0d683354b4a47bfc57d06aef621e259dd54f07226606edb586ca2df885b8f0f20573891731f965381262c964aa0daecf962500c42e87bd921c264707ea8af7fa1857b87b63ef07e4407d0f1df99e2c6b936b035f645ba830c263fa5293ec52029e5c809840236be4ac09264bbdca5da05a0fbc230c8f1cc208ecdded58ac19b446e6c6bffc00d6b58fe90361ff6337be9f86e795cee8d7a487aedac95470ba412b8ba5f39b79a736857185e69835303b7f7ce21795e3ddf83ae396a69c006dc7526dbce2d9642a5226ed5c644850969936fcd1d05c7c795ba220c9156addbbada59e3fa2b4a6c83c8e12aa8c5234a9cb7c49ccc9c106d94cb0f006c158ba0990b7a5baa1250270235e2d1dfe2c334ebe3a0234bb8774d511c8817b989bf22755083af0fe02f035c9c55e7f1ddede1a04af71b08a3f96cb0c93dea16cef4f287d26225927294f4a60cf5bdb0eef66ef0cfbbd7f44d81f6f4694161dccbcc941261d1f0dd31c196fcc56ec448478e65586883aff5522d76f16c8f5dfabeccaa460f5cb58b2a2c6dd9a16d60580bb77afc87146e17481b3567e341556e73c823b4776a4dec2c570100722fc8014b5d8409ddd6fafc0dafb73b506c3c83ebb6650959a528800afd265c4cc915b486cae5c1bbefa2c03374b0bad37d0f97d8e4ee9a5e1c6247dfc0d7d9fd88241d5f41f3e07b923393a89b0c011333a3f3e81efdcad5838571b2579173b4e7cbb052b82216af67b45a87e19fbb54a2512d445f354b0f15250f9f93432c9cc79bc16f005d4868a1e1bff5ef3cffa9e605e9f1c5887700d0da6fd8f5a8765304270abcb90205e7c7ed7b8c6411c5a8dcf36383d79babf84fea6ce3963809e8d17c0e7a1b468ee14a5b3a420a10bea58d7a51c6a7dcea9a465948ad98686a699f3e941d70d78797e2d9c88da2af2a21fd51579485a5f34e905104eb701ce4a929d0734af2e4020112e93a3cd8b00aa69f141aafd16db85f57a6201beb632d4e8bb577e7a907c58071a8f9ad2d7014bec4ddb93cb37c2eb7cfb02dff12e1448d1de6aa7f99125eb80e669b3ea74880342def8df4898d5a7450d1399fc35b6c2fa5b47c9e462810d6e0ea5c2d86817c139fee36bc29504a599cda9a7eeb5aa5bf239db8ec2ed8ab0c01c8c5ba76d6845a55ebc9aa801e0307b819443e749014874f2a82e2f652b28ddfcef6524262a2ba5f06f1c410a4c437ec4b5a2ed3aa0c48ac9fcea61c9d79f1e3c58fbf9597803619b60a34b7acb633038791643ec56e244109e85168be352558957ec196e5e28ebaa5bd88d774229a4af5d0324addc5781a3ebe4db9c7eb8fe4e929aa3ee5b1d316c115d9561b7b6ff65fa546d504f08d43d996e11a985f97ede19d02a0a8b73b9a94ac68d985921c6715036c76a4cd7503514185ae184e341cc537a1afb536893e49774ace6156caf891c106dbc352c8e2046149e9dda0e38ad619cf01c84abbdb3c227d6f542d28309b8f23ec1832a67562b036b92ab1dbc390e671d8b00324426e5f27f050d1bd0d4640c733a84c0c15191f17fb879ce5fea151d7d8746d5676b0f7333c2299bda6745ff80d79264079b14a9b47023495aa2bb61cfa8ba20f2248cd20a074ea55578d4712b03722609136e11ae358e1b930241938e71ca6a619a12a72a9793067445b7c049d6d458f75c3952255d57c0f25a7c826041e04334ba1c34c7ada6c4a51023b49155c1109c345ab483f4052d32ba3398ed07d6ed3a301f42935a5cd7db47f985fa3e5cb89424bc2accf81e26e5a1c3c42122178d07ac51e525d0f2f18d6905eaee66a40e4025fe91f6e1cd955add82fa17cdf84828da07ddcec6874fb1f991391759d667b8e90b43c34617854850f85761100890a558f76c011742008666c0bad13fd865370e8ee6d7f2c8d54eef860bd213859b2516882a4db498fce8d9373658347d4f3c07d59dbbc6f49be3aab3246d931a5552e0de9543ae11988b5f26df4b58f755f9773599b164298db36500a1cff40eeb34328d892418097e6aa6bdea6748284aa6ff6ac5a12c809cbf9b9389b948139ecf1a772ad1f88d6583fa1f6b14745142d6fd98e6b15b27a68eefe08ca393842630b731061f3e702c32263c1dd520da09d1a8cbc04d3abc83572bd44457f15bcd819bdedddbf66457411ffc7daeab161b52bc7c56322a1520b7fada039d9878bacc3cc1d06135dea254d862127dd88bd66f37e95ef0ced93b74a478555db7d5528b2af5324486bc9fb1b30e12552e6a2a5e9d067554e7d0b056899b7352fec710abd64277f4cce3e8cc5af5b6d36432c48ce53e033c26ea0d0f2a49b1b9983d4f6bb8896f5e996e72d9b43ed9e18b80f59d427f92d540139f1b96bb9e035785d4ea195795a601bc995b3bcbbd2e30f2b576746b5758b063f5541da52c2f783bee1e801b67c253312322b54eca310f4422dcad24ac8af45d66d175e6c4665262f08cd874a55717cc37888a3c5ebb934690fd1ed81e689c50145d43cb2f69bcf276add7589f9f189724e9ede207c275a4eb7a96c44443e77ba549757badc09e1d54f5a4bb3239c4df76f0bc1bb658daf58367053dcd232f769aa8db37f2d45a71e9541c02b82ad9977d29675329caf8b822e283bc954be678e1a6a91ca26e67d685c4aae2c93a780ff5b4e3ed004d44f0550fd4bb8f1c1ae50da758ba50340411a5fa6d84f8898230c057c7372dfc31b869620cd1dbabb47cde81d42f50c05caaa6cfdaead00a6c0eb70f1c8d92c05d48cc7b6fd92471cbb2bda052490d0ae8a6a9c2967882e38936283128fe4c99b9f45d4d00c82748e053afd7928835c438fbcae3e5e2595e1482e2c6df7edc156ec9befb6db3f710868745d7a5012fe94f467f56c335bd642a81afef118925717fbf74d5f59dd23281b42f4ba20c64b2639e3a111aded283aab234d0c1f24b88adec3fcdcd40dd439ef9c0f0ff2da310b33a217f42dc63995fce6ebaf72a8437b3533420951c03947401c444449380a1ee0448ed0a05f0c8cf0b824c8730dde9158856d9dc87ad5ce8b8cde695b462f89fa48ea0f1ecdf3885f4dd24ae86f8760f87e7ebde07a2101479aeada1906d29e01922bc9993608621edaec1b5ec7b711383b484e6582582c05417b07f122ff9096f34e26f63129e1ee4a5472afe5f373dade076ef9999aee07d4e89aedb58aafef8a046103453c32eebfd5ca4315f3e6542c11ab1a20299b9bac212a3010be57bceba3dd4c07a46a00de5a498c6991d35785277847e7825adf620f35f109ae9b67a83b856229657b71844285c3c60416d24a387b954c7fa365cdda39f41caff9a6ac989115f9c43e24caf2cb413a6f7ccc159be283d2152c9ee2178828fb4f9d3d3a26928d1bcdb1bab81026dbcdfae0d0a66cccdf0ee8db7df25a173430438b33cf239fc5e8d6affd020270b2bdaa4f45c086e62799159c8828cee4a5316a0a8e9992da0b7c2702b0c8d1c85ff9af10540d42c8ee212939eacb5287c528337ca8f6925badc2f91e4788805f4bdb2e7070c2de64f671e47fc1257fa152c90648c1393f6a0c01ea6c0201983fc57c82039d034f997dabf7aad381dfba5e13099d9111b86165a8183306e1799867a119d4350576a7fb9ad208ed3fe33c7ac96ca4e2601aefed73b0e28a48f7d8b1c3d4b79d64c5a946fbf03a79ff5bce1ab7bc8cf22299550c4489cdf753f2d4d8ddbc799d19535540ae71446ad54da74d70feb7fa72ebbe4e3474bd532aaabebbcdd22a653c108b953eb4c8395d12bb6941512b0d6e613884370dd9afde017e541f65d191b0fb65fdd9d48dc90d9c0928f5be0bb73065c6cec64e898a07048c52b4e62490d055ff8ed2da34fa90acf4784fc95a41d9124678b094a9b627b0301eae85db3ed4aad2d2d31468ef97d3c2706b4999c099410fa99fa87d0c4e3c5e5ade508f2f17c7a1cc1efb006dc7e2f2a15f3cada5caf206a70db30be7ba3c973f6d31c21e352bc6dd59e36af2818c1247aab4fdfc42d4a3d54d87fed79c3954ede366c8ef92f6719eda3ce4abfbe61babd2b5c143d48e90093e378d86745c9e6291335ce8788620508a9249ef7864150da11332f00c8f91a6ea507db85faba1a84909a07ac4bc8d8e4c27efe4967bf23879e445e86997fe763d1888bf7df2f22e15480d23d13bc7df94e951c6739df7b84aa658d498c9a9771bbb609c15a450d24c0461dbba23683239fb3610d9f77426051cca267c826aeec6eefa6258ac1ea40691c8dc7006c63e6b375fb32f91102ff9309bb8ca87763d4db2eee6da070ba4fdad54f8d91f540d4b301cd9a78056bad648579ba620d24334cc19e892b7e39f67e439152b492cef1091dfd273a3e3a93de18df7aa8832cbbd7488536b1837a39bd8d1d6f6eb1502813eaffe673ad5770fb8e039c81b7692ffb94a71a6a1ea27fa3cdc2f8913484287d78378538bf5096ccdceeed436ffcaf04c7a30bb7f31719453c9fd7f2bf7571329eef64bf1aaccd5a26d759d61ac2836e71f93222292c4aa33b1ef7c84b28e1a6d758acb45737ca95fde2bfa8f6cf1e7c9e9911027e60a185901951afb279ff56d81133f8b61f78f1960f8cdcdad189b938afbf1144628f370127e5ff34e866b79eeb627c77c477f72a275406f07d56eb103dc32c6aad4ccebae83a7933a98b4506773450d39007c7319245e028fb105285f2be83cf7ae9796c7c7975154bee4e81eba808e84a2f9e29468988e9fdef4b855557c7190bff2f19a71b10a06f56696cca0e06ab0b13cc1a6bb8e1c673c4758a04a7e4e1d61366a846e45f44e52d19279966da35821cc6b0b279f7b5020e69f9a13e34554bee0c6ae926e2b7a58e39fe46be02d06c2d94fbfda6f9074cf734bc1c4c36f2fe9e7ea01aea0b6cf4ab13c8a4305272e4e47be90a25a47add35c60856623347412adac136739a161e1c9bfad5f05451f0f5a09d4cd48ba2c72e16673602f5484f1626c78ee137539ef296fe9e5c77914e5d54c768d5677a3812d07d41638892afa87b2c6d46325c1a3fc59ac607eeb0d78e6afadfb6f2da9cb003b28130e0217c3c1afb1c266873152edbec05ffa4dff3f58aba95c058ce100ec7cd0f7f864d764fcd485d204034746088522702872f3b766d1ef1f03241e0de6fb9ef84606258c548943423fb6439fc457b13a9c2590ab85084ea2776688e6848a1782adb951e353567e067363ade9bfd323796b9cabbd7ae9cf9d5690c2072b4c97720be416b4aa1b0c1e060ebfd35132dca6be1d3977937fb3613774092352d31b5ba4e2cbdcbfa01604fca291dda713b3bb02aba541c7938de1dd23ec41f0f9cd73dbf40918c3398abf1e36c91f517063daea350540ac4a9cd08c0e3b5d4f379ae0f8209ce3eac98c6085b62bbe73326d5b2f6a16144b9f58d0f5dfd32fa0716a9e3973a854e9cdad5776fdcc172c2917db47af5c56a3608331efa50e9d3876763edc1678e7e0b2b64475d2dd899ec24e69bf5fff69c7995bf3ff67cd410f6eb872688e6b88e3e32d9c959ad497acd0dde58c651b30e239221f3e31c1e84630ff504d4757d0f07a05abdf564ec3095c249e028e5b0f11d2576eecbcdc98f1fe74e91aaf7dedb31b68ed8cc60f452e97ba86a1ad1eae11371ff81ec382964bdeb4b6af0ca048385eb901f223fb6c3454d1493328c628ccb7bc1221f6a8f850770540964d5f637ae086bb1b5d549463e13ae74e5a0f2d0f54ec23c8255a1491da300088efa157d1392ffb3c4b5caa7c8e748356ed16840c32ea612035bb2c1b595c2a30998d2d91cd49a0b0dabad1f55c0481a678a32bdf97a41db07f58d27632f3311a3a8f83bd9633aa2a76ec8bf12810aca3ac27258c016ef734f3b99dfd5e38f584fba43524b31a69</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Digital-Ocean</tag>
      </tags>
  </entry>
  <entry>
    <title>侯捷——C++11 14标准库</title>
    <url>/zh/null/</url>
    <content><![CDATA[<p>C++11 14相关知识</p>
<span id="more"></span>
<h2 id="侯捷-c-11-14标准库">侯捷——C++11 14标准库</h2>
<h3 id="variadic-template">Variadic Template</h3>
<ul>
<li>数量不定的模板参数：这个东西是C++11一个非常意思的东西，他可以接受任意个参数，然后输出出来</li>
<li>使用的时候也是需要注意，对于一个数量不定的模板参数，记得需要一个同名的函数来对最后一个进行“垫底”的操作</li>
<li>一般来讲，有参数的比无参数的更加特化一点，无参数的更加泛化</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//这里为空，作为最后的一个垫底操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>... Types&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> T&amp; firstargs,<span class="type">const</span> Types&amp; ...args)</span></span>&#123;</span><br><span class="line"> cout&lt;&lt;firstargs&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(args...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="initializer-list">Initializer-list</h3>
<p>Initializer-list的使用</p>
<ul>
<li>对于何时使用initializer-list，一般情况下，我们在使用{}时候，如果构造函数有接受一个initializer-list，那么整个{}里面的内容就会被打包进去，然后传递给函数进行调用</li>
<li>{}就会构造出一个array&lt;T,N&gt;,然后传入进去</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(std::initializer_list&lt;<span class="type">int</span>&gt; val)</span></span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">auto</span> p=val.<span class="built_in">begin</span>();p!=val.<span class="built_in">end</span>();p++)&#123;</span><br><span class="line">  std::cout&lt;&lt;*p&lt;&lt;std::endl;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Initializer-list与初始化</p>
<ul>
<li>对于初始化，使用{}可以达到合适的初始化目标</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> j&#123;&#125;<span class="comment">//j=0;</span></span><br><span class="line"><span class="type">int</span> j<span class="comment">//undefine</span></span><br><span class="line"><span class="type">int</span> *p&#123;&#125;<span class="comment">//p=nullptr</span></span><br><span class="line"><span class="type">int</span> *p<span class="comment">//undefine</span></span><br></pre></td></tr></table></figure>
<ul>
<li>initializer-list对于隐式转换会报错/warning</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> j&#123;<span class="number">5.0</span>&#125;<span class="comment">//error</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>initializer-list的初始化与拷贝</p>
<p>对于其初始化，我们一般需要知道，其内部只是存储了一个指向第一个元素的指针指针和对应的函数</p>
<p>所以如果我们拷贝他。其并不会把元素全部都复制一份，而是复制了其对应的指针。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内部储存数据</span></span><br><span class="line">iterator array<span class="comment">//指向头部</span></span><br><span class="line">size_type len<span class="comment">//表示长度</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Initializer-list对标准库的影响</p>
<ul>
<li>标准库很多都使用了initializer-list，在C++11中，利用这个特性，我们可以将“一包”东西进行统一的操作，而不是单一单一一个一个来</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> c=<span class="built_in">max</span>(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);<span class="comment">//寻找三个值中最大的</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//初始化</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ax</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span></span>;<span class="comment">//初始化</span></span><br><span class="line">ax.<span class="built_in">insert</span>(ax.<span class="built_in">begin</span>()+<span class="number">3</span>,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;);<span class="comment">//一次性插入多个元素</span></span><br></pre></td></tr></table></figure>
<h3 id="explicit">explicit</h3>
<p>explicit它可以保证：不让编译器做隐式的类型转换</p>
<p>C++11的explict可以使用在传入多个参数的explicit上了</p>
<h3 id="default-delete">=default，=delete</h3>
<p>=delete可以用在任意函数身上</p>
<p>=default则不能</p>
<p>拷贝构造，移动构造以及对应的operator=只能有一份，所以不能在设定自己的函数之后再来一份default</p>
<p>一般情况下，如果成员有指针类型，那么一般都要自己定义，否则使用default版本就可以了</p>
<h3 id="alias-template-type-alias">Alias Template,type alias</h3>
<p>using关键字代表别名，在cpp11中，using的功能更加强大</p>
<ul>
<li>using的命名效果甚至可以在template中使用，完美的进行调用</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Vec＝std::vector&lt;T,mymalloc&lt;T&gt;&gt;;</span><br><span class="line">Vec&lt;<span class="type">int</span>&gt; an</span><br><span class="line"><span class="comment">//这样可以成功的调用std::vector&lt;int,mymalloc&lt;int&gt;&gt;</span></span><br><span class="line"><span class="comment">//define和typedef都达不到对应的效果</span></span><br></pre></td></tr></table></figure>
<ul>
<li>但是这种方法到局限就是，没有办法进行偏特化和全特化</li>
</ul>
<p>using关键字还有一个作用就是作为类型别名</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*func)</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>;<span class="comment">//C语言就有的用法</span></span><br><span class="line"><span class="keyword">using</span> func=<span class="built_in">void</span>(*)(<span class="type">int</span>,<span class="type">int</span>);<span class="comment">//C++的用法，更加直观</span></span><br><span class="line"><span class="comment">//两者作用相同</span></span><br></pre></td></tr></table></figure>
<p>using常用的几种方式</p>
<ul>
<li>using namespace std； using std：：cout</li>
<li>using class：：member；//明确表明我需要使用那个函数（重载的时候可能会用到之类的）</li>
<li>type alias，alias template</li>
</ul>
<p>using关键字总的来说就是能记录某一个状态</p>
<ul>
<li>记录vector的状态：（Vec）的例子，可以完美记录vector需要调用的函数，以及对应的默认函数</li>
<li>记录一个名字：也就是作为类型别名</li>
</ul>
<h3 id="template-template-paramber">Template template paramber</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">template</span>&lt;<span class="keyword">class</span>,T&gt; <span class="keyword">class</span> <span class="title class_">container</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="noexpect">noexpect</h3>
<p>定义：保证函数不会丢出异常</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span>noexpect</span>;<span class="comment">//无论如何，函数都不能丢出异常</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span><span class="title">noexpect</span><span class="params">(<span class="literal">true</span>)</span></span>;<span class="comment">//在某种条件下，函数不会丢出异常</span></span><br></pre></td></tr></table></figure>
<p>在使用move语义的时候，记得函数一定不能抛出异常，并且后面加上noexpect</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mystring</span>(string &amp;&amp;s)noexpect....</span><br></pre></td></tr></table></figure>
<h3 id="override-final">override，final</h3>
<ul>
<li>override检验是否是原来的函数重载</li>
<li>final有两个地方
<ul>
<li>阻止子类继承父类的class</li>
<li>阻止子类继承父类的virtual function</li>
</ul>
</li>
</ul>
<h3 id="decltype">decltype</h3>
<p>decltype的三种使用方法</p>
<ul>
<li>
<p>用来声告一个return type</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> Q&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(T x,Q y)</span>-&gt;<span class="title">decltype</span><span class="params">(x+y)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>适用于模板元编程</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">map&lt;string,<span class="type">int</span>&gt; a;</span><br><span class="line"><span class="keyword">decltype</span>(a)::value_type elem;<span class="comment">//</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>传递一个由lambda对象返回的返回值的类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> cmp=[](<span class="type">const</span> <span class="type">int</span> &amp;a,<span class="type">const</span> <span class="type">int</span> &amp;b)&#123;</span><br><span class="line">  <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::set&lt;<span class="type">int</span>,<span class="title">decltype</span><span class="params">(cmp)</span>&gt; <span class="title">xx</span><span class="params">(cmp)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="lambdas">Lambdas</h3>
<p>C++ 11允许通过lambda定义一个inline function或功能单元， 他可以被用在local object或者parameter</p>
<p>lambdas本身就是一个对象，如果要直接调用他，需要加一个括号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[]&#123;</span><br><span class="line">   std::cout&lt;&lt;&quot;hello&quot;</span><br><span class="line">&#125;</span><br><span class="line">//以上这个不能直接调用，如果需要直接调用的话需要按照下面这样写</span><br><span class="line">[]&#123;</span><br><span class="line">   std::cout&lt;&lt;&quot;hello&quot;</span><br><span class="line">&#125;();//注意这个括号，使用括号能够进行调用</span><br><span class="line">//或者</span><br><span class="line">auto I=[]&#123;</span><br><span class="line">   std::cout&lt;&lt;&quot;hello&quot;</span><br><span class="line">&#125;</span><br><span class="line">I();//发生调用</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>lambda格式回顾</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[]()mutable throwspec-&gt;rectype&#123;&#125;</span><br><span class="line">/*</span><br><span class="line">[] 捕获外部的非static objects</span><br><span class="line">() 参数（行为像函数）</span><br><span class="line">mutable 可以改动[]里面的数据</span><br><span class="line">throwspec 丢出异常</span><br><span class="line">rettype 描述返回lambda的返回类型</span><br><span class="line">如果mutable throwspec，rettype都没有，则可以不写括号，否则不可以</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p>[]的特别注意</p>
<ul>
<li>[]可以取用外部的变量</li>
<li>[=]代表pass by value</li>
<li>[&amp;]代表pass by reference</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int x=0;</span><br><span class="line">int y=2;</span><br><span class="line">auto x=[x,&amp;y]//代表y是reference，x是value</span><br><span class="line">auto y=[=,&amp;y]//除了y是reference，其他的所有变量都以reference进行传递</span><br><span class="line"></span><br><span class="line">int a=0</span><br><span class="line">auto f=[a]()mutable&#123;</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br><span class="line">a=42;</span><br><span class="line">//但是在调用f完成的时候，a是1，因为a记录的是当时的值</span><br><span class="line"></span><br><span class="line">int a=0</span><br><span class="line">auto f=[&amp;a]()mutable&#123;</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br><span class="line">a=42;</span><br><span class="line">//但是在调用f完成的时候，a是43，因为a记录的是当时的变量的引用</span><br></pre></td></tr></table></figure>
<p>lambda与stl使用的时候的特别注意</p>
<ul>
<li>lambda在与stl库搭配使用的时候，因为lambda没有默认构造函数，没有assignment operator 所以当lambda作为比较函数的时候需要特别注意</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto cmp=[](const int &amp;a,const int &amp;b)&#123;return a&gt;b;&#125;;</span><br><span class="line">std::set&lt;int,decltype(cmp)&gt; a(cmp);//注意这里必须要放cmp，否则就会调用默认的构造函数</span><br></pre></td></tr></table></figure>
<h3 id="rvalue-references-perfect-forwarding">Rvalue references，perfect forwarding</h3>
<p>右值引用就是他做了一个“偷”的动作，将值直接移动，而不是使用一个allocator进行分配然后赋予</p>
<p>左值只能出现在左边，而右值只能出现在右边</p>
<p>所有被“偷”的左值，都必须确保后面不再被使用</p>
<p>copy作一个深拷贝，move则是一个浅拷贝</p>
<p>对于浅拷贝和深拷贝没有区别的操作，则是否move就是没有区别的。</p>
<p>move在deque和vector影响最为巨大，其他的则不一定</p>
<p>move只是交换对应类的指针，如果没有指针，那么效率lei’s</p>
<p><strong>写移动类函数的三个操作</strong></p>
<ul>
<li>传入函数使用 &amp;&amp; ，然后可以使用初始化队列进行构造</li>
<li>将对应的值设为0</li>
<li>将其带有的指针设为null（原因：必须设为null，否则会在临时对象调用析构函数的的时候将本来不能析构调的资源析构，导致空悬指针）</li>
</ul>
<h3 id="hashtable">hashtable</h3>
<ul>
<li>
<p>hashtable对于C++中unordered的容器，</p>
</li>
<li>
<p>他的基本原理是使用一个可以增长的buckets，每一个bucket是一个指针，指向一个对应的单向链表</p>
</li>
<li>
<p>当元素个数大于buckets个数的时候，buckets的个数会增长到原来的两倍左右，但是是一个素数，然后重新将元素放入</p>
</li>
<li>
<p>如何编写一个万用的hash function：30，25：32</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>侯捷</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划相关代码</title>
    <url>/zh/null/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="一维数组">一维数组</h2>
<h3 id="滚动数组">滚动数组</h3>
<p>在一维数组中，通常最后的结果不会与整个数组有关，因此可以<br>
只保留与结果相关的几位即可。<br>
注意依次更新dp数组的前几位；</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = dp[<span class="number">1</span>];</span><br><span class="line">dp[<span class="number">1</span>] = dp[<span class="number">2</span>];</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>
<h2 id="背包问题">背包问题</h2>
<h3 id="01背包">01背包</h3>
<h4 id="理论基础">理论基础</h4>
<p>问题：n件物品具有重量和价值两种属性，每个物品只能用一次，放入有重量限制的背包中<br>
使得总价值最大</p>
<p>五部曲：<br>
dp[i][j]  从下标为0到i的物品中，放入重量限制为j的背包中的最大价值,<br>
j应该从0起步,即允许背包重量限制为0，即不允许放物品<br>
递推公式：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mi>j</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">]</mo><mo>+</mo><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≤</mo><mi>j</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp[i][j] =
\begin{cases}  
dp[i-1][j], &amp; weight[i]&gt; j\\ 
dp[i-1][j-weight]+value[i], &amp; weight[i]\le j \\
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>初始化:<br>
dp[0][j] 当weight[0]&gt;j时 为value[0] 否则为0</p>
<p>遍历：<br>
先物品再背包或先背包再物品均可</p>
<h4 id="滚动数组-优化">[[滚动数组]]优化</h4>
<p>对于二维dp且每次以行形式更新的，可以考虑用一个一维数组来保存每次更新的结果。<br>
dp[j] 即为重量限制为j的背包中的最大价值<br>
递推公式：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[j] = max(dp[j],dp[j-weight[i]]+value[i])
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p>
<p>这里的dp[j]相当于是上一层的dp[i-1][j]<br>
初始化：<br>
有两种思路：</p>
<ol>
<li>dp[j]看作从i=-1开始，全为0</li>
<li>dp[j]看作从i = 0开始，按照2维的思路初始化</li>
</ol>
<p>遍历：<br>
根据初始化的不同，遍历方式不同</p>
<ol>
<li>倒序遍历，由j到weight[i] 防止物品多次加入背包</li>
<li>正序，同二维的思路<br>
区别：<br>
倒序可以减少遍历次数，当j小于weight[i]时，必定等于上一层的dp[j]</li>
</ol>
<h3 id="转化为01背包">转化为01背包</h3>
<p>常见情景：<br>
分成两组，可以对原先的求和，令目标为sum/2</p>
<h3 id="完全背包">完全背包</h3>
<p>当01背包里同一件物品可以多次放入时，</p>
<p>遍历方式不同 正序遍历</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=weight[i];j&lt;weight_max;j++)</span><br></pre></td></tr></table></figure>
<h3 id="组合-排列">组合，排列</h3>
<p>组合：物品的顺序不影响结果<br>
求组合，先物品后背包</p>
<p>求排列，先背包，后物品，此时因为背包从0开始，内层循环通常需要排除j&lt;weight[i] 的情况</p>
<h3 id="多重背包">多重背包</h3>
<p>与01背包的区别在于，第i件物品最多有Mi件物品可用</p>
<p>可以把多重物品转换为01背包，</p>
<p>空间：即把物品数量超过1个的看作不同的物品，这样每个物品的数量就是1个了<br>
时间：循环内部在加一重循环，即物品的个数，重量，价值分别乘以个数即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= nums[i] &amp;&amp; (j-k*nums[i]&gt;=<span class="number">0</span>); k++)</span><br><span class="line">&#123;</span><br><span class="line">	dp[j] = <span class="built_in">max</span>(dp[j], dp[j - k * weight[i]] +　ｋ　* value[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="偷盗问题">偷盗问题</h2>
<p>当数组为环形时，考虑将数组分为去除尾部和去除首部，即第一个选中则最后必不能选，同理最后一个选中则第一个不能选</p>
<h2 id="树形dp">树形DP</h2>
<p>对于每个结点，都有自己的dp数组代表选与不选时的结果。</p>
<p>熟悉二叉树的遍历方式。</p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>用python实现天气预报助手</title>
    <url>/zh/null/</url>
    <content><![CDATA[<p>借助github action实现自动化</p>
<span id="more"></span>
<h2 id="背景">背景</h2>
<p>今年天气变化莫测，一会儿30多度一会儿10几度，就想着要不写个自动脚本，监测明后两天是否有雨，或者气温是否极度变化，有的话就发个邮件通知下</p>
<h2 id="思路">思路</h2>
<p>通过查询，了解到<a href="https://dev.qweather.com/docs/api/weather/weather-daily-forecast/">和风天气api</a>免费版本支持每日预报(3-7天)请求次数1000次对于个人用户远超所需了，因此只需要借助api获取返回的json文件，再根据获取到的信息进行处理即可</p>
<h2 id="实现">实现</h2>
<h3 id="获取天气">获取天气</h3>
<p><a href="https://dev.qweather.com/docs/api/weather/weather-daily-forecast/">和风天气API使用方法</a><br>
url为&quot;<a href="https://devapi.qweather.com/v7/weather/3d">https://devapi.qweather.com/v7/weather/3d</a>&quot;<br>
参数只需确定城市<a href="https://dev.qweather.com/docs/api/geoapi/">城市搜索服务</a>和key<a href="https://dev.qweather.com/docs/configuration/project-and-key/">如何获取你的key</a><br>
通过python的request包(需要额外安装)的get方法得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getWeather</span>(<span class="params">url, params</span>):</span><br><span class="line">    response = requests.get(url, params, timeout=<span class="number">30</span>)</span><br><span class="line">    response.encoding = response.apparent_encoding</span><br><span class="line">    html = response.text</span><br><span class="line">    js = json.loads(html)</span><br><span class="line">    daily = js[<span class="string">&quot;daily&quot;</span>]</span><br><span class="line">    state1 = isSend(daily[<span class="number">0</span>], daily[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;True&quot;</span> <span class="keyword">in</span> state1):</span><br><span class="line">        send(state1[<span class="string">&quot;True&quot;</span>], <span class="string">&quot;明天&quot;</span>, daily[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    state2 = isSend(daily[<span class="number">0</span>], daily[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;True&quot;</span> <span class="keyword">in</span> state2):</span><br><span class="line">        send(state2[<span class="string">&quot;True&quot;</span>], <span class="string">&quot;明天&quot;</span>, daily[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<h3 id="判断是否需要发送">判断是否需要发送</h3>
<p>初始化一个字典，通过setdefault()方法，返回键值如果键值不存在，插入键，且对应的value默认为None<br>
判断温差，雨雪，风力，紫外线是否需要注意，是的话添加True的键值，并且对应的value要通过累加字符串的方式更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isSend</span>(<span class="params">today, tomorrow</span>):</span><br><span class="line">    state = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="built_in">int</span>(today[<span class="string">&quot;tempMax&quot;</span>])-<span class="built_in">int</span>(tomorrow[<span class="string">&quot;tempMax&quot;</span>])) &gt; <span class="number">6</span>):</span><br><span class="line">        state[<span class="string">&quot;True&quot;</span>] = state.setdefault(<span class="string">&quot;True&quot;</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot;温度&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;雨&quot;</span> <span class="keyword">in</span> tomorrow[<span class="string">&quot;textDay&quot;</span>] <span class="keyword">or</span> <span class="string">&quot;雪&quot;</span> <span class="keyword">in</span> tomorrow[<span class="string">&quot;textDay&quot;</span>] <span class="keyword">or</span> <span class="string">&quot;雨&quot;</span> <span class="keyword">in</span> tomorrow[<span class="string">&quot;textNight&quot;</span>] <span class="keyword">or</span> <span class="string">&quot;雪&quot;</span> <span class="keyword">in</span> tomorrow[<span class="string">&quot;textNight&quot;</span>]):</span><br><span class="line">        state[<span class="string">&quot;True&quot;</span>] = state.setdefault(<span class="string">&quot;True&quot;</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot;天气&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(tomorrow[<span class="string">&quot;windScaleDay&quot;</span>][<span class="number">0</span>]) &gt; <span class="number">4</span>):</span><br><span class="line">        state[<span class="string">&quot;True&quot;</span>] = state.setdefault(<span class="string">&quot;True&quot;</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot;风&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(tomorrow[<span class="string">&quot;uvIndex&quot;</span>]) &gt; <span class="number">4</span>):</span><br><span class="line">        state[<span class="string">&quot;True&quot;</span>] = state.setdefault(<span class="string">&quot;True&quot;</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot;紫外线&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        state[<span class="string">&#x27;False&#x27;</span>] = <span class="string">&quot;没有特殊情况&quot;</span></span><br><span class="line">    <span class="keyword">return</span> state</span><br></pre></td></tr></table></figure>
<h3 id="发送信息">发送信息</h3>
<p>根据之前返回的四种情况加上提示语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getMessage</span>(<span class="params">state, day</span>):</span><br><span class="line">    message = <span class="string">&quot;您的天气小助手提醒您：\n&quot;</span></span><br><span class="line">    message += day</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;温度&quot;</span> <span class="keyword">in</span> state):</span><br><span class="line">        message += <span class="string">&quot;的气温变化幅度大，记得增添衣服哟(提前准备好)\n&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;天气&quot;</span> <span class="keyword">in</span> state):</span><br><span class="line">        message += <span class="string">&quot;可能会出现雨雪天气，记得带伞\n&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;风&quot;</span> <span class="keyword">in</span> state):</span><br><span class="line">        message += <span class="string">&quot;风力过大,出门小心\n&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;紫外线&quot;</span> <span class="keyword">in</span> state):</span><br><span class="line">        message += <span class="string">&quot;紫外线强度过高，出门做好防晒\n&quot;</span></span><br><span class="line">    message += day+<span class="string">&quot;具体天气如下：\n&quot;</span></span><br><span class="line">    <span class="keyword">return</span> message</span><br></pre></td></tr></table></figure>
<p>把获取到的天气转化为字符串，自己定义一个字典key_str key为天气里面的key，value则是对应的字符串<br>
这样通过遍历key_str里的key值就可以把对应的字符串即相应的数值组合到一起</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key_str = &#123;</span><br><span class="line">    <span class="string">&quot;tempMax&quot;</span>: <span class="string">&quot;最高温度&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tempMin&quot;</span>: <span class="string">&quot;最低温度&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textDay&quot;</span>: <span class="string">&quot;白天天气&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textNight&quot;</span>: <span class="string">&quot;夜间天气&quot;</span>,</span><br><span class="line">    <span class="string">&quot;windDirDay&quot;</span>: <span class="string">&quot;白天风向&quot;</span>,</span><br><span class="line">    <span class="string">&quot;windScaleDay&quot;</span>: <span class="string">&quot;白天风力&quot;</span>,</span><br><span class="line">    <span class="string">&quot;windSpeedDay&quot;</span>: <span class="string">&quot;白天风速&quot;</span>,</span><br><span class="line">    <span class="string">&quot;windDirNight&quot;</span>: <span class="string">&quot;夜间风向&quot;</span>,</span><br><span class="line">    <span class="string">&quot;windScaleNight&quot;</span>: <span class="string">&quot;夜间风力&quot;</span>,</span><br><span class="line">    <span class="string">&quot;windSpeedNight&quot;</span>: <span class="string">&quot;夜间风速&quot;</span>,</span><br><span class="line">    <span class="string">&quot;precip&quot;</span>: <span class="string">&quot;总降水量&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uvIndex&quot;</span>: <span class="string">&quot;紫外线强度指数&quot;</span>,</span><br><span class="line">    <span class="string">&quot;humidity&quot;</span>: <span class="string">&quot;相对湿度&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vis&quot;</span>: <span class="string">&quot;能见度&quot;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wheather_msg</span>(<span class="params">wheather</span>):</span><br><span class="line">    message = wheather[<span class="string">&quot;fxDate&quot;</span>]+<span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> key_str.keys():</span><br><span class="line">        key_str[key] += <span class="string">&quot;:&quot;</span>+wheather[key]</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;温度&quot;</span> <span class="keyword">in</span> key_str[key]):</span><br><span class="line">            key_str[key] += <span class="string">&quot;度&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;风力&quot;</span> <span class="keyword">in</span> key_str[key]):</span><br><span class="line">            key_str[key] += <span class="string">&quot;级&quot;</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="string">&quot;风速&quot;</span> <span class="keyword">in</span> key_str[key])):</span><br><span class="line">            key_str[key] += <span class="string">&quot;公里/h&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;降水量&quot;</span> <span class="keyword">in</span> key_str[key]):</span><br><span class="line">            key_str[key] += <span class="string">&quot;毫米&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;能见度&quot;</span> <span class="keyword">in</span> key_str[key]):</span><br><span class="line">            key_str[key] += <span class="string">&quot;公里&quot;</span></span><br><span class="line">        key_str[key] += <span class="string">&quot;\n&quot;</span></span><br><span class="line">        message += key_str[key]</span><br><span class="line">    <span class="keyword">return</span> message</span><br></pre></td></tr></table></figure>
<h2 id="发邮件">发邮件</h2>
<p>需要QQ邮箱开通SMTP服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from email.mime.text import MIMEText</span><br><span class="line">import smtplib</span><br><span class="line">import time</span><br><span class="line">def sendEmail(message):</span><br><span class="line">    msg_from = &#x27;&#x27;  # 发送方邮箱</span><br><span class="line">    passwd = &#x27;&#x27;  # 发送方邮箱的授权码</span><br><span class="line">    msg_to = &#x27;&#x27;  # 收件人邮箱</span><br><span class="line"></span><br><span class="line">    subject = &quot;天气预报&quot;  # 主题</span><br><span class="line">    msg = MIMEText(message)</span><br><span class="line">    msg[&#x27;Subject&#x27;] = subject</span><br><span class="line">    msg[&#x27;From&#x27;] = msg_from</span><br><span class="line">    msg[&#x27;To&#x27;] = msg_to</span><br><span class="line">    try:</span><br><span class="line">        s = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)  # 邮件服务器及端口号</span><br><span class="line">        s.login(msg_from, passwd)</span><br><span class="line">        s.sendmail(msg_from, msg_to, msg.as_string())</span><br><span class="line">        print(&#x27;[&#x27; + str(time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;,</span><br><span class="line">                                      time.localtime(time.time()))) + &quot;]邮件发送成功,邮件内容：&quot; + message)</span><br><span class="line">    except s.SMTPException:</span><br><span class="line">        print(&#x27;[&#x27; + str(time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;,</span><br><span class="line">                                      time.localtime(time.time()))) + &quot;]邮件发送失败,邮件内容：&quot; + message)</span><br><span class="line">    finally:</span><br><span class="line">        s.quit()</span><br></pre></td></tr></table></figure>
<p>[借助github的Action服务]</p>
]]></content>
      <tags>
        <tag>vscode</tag>
        <tag>python</tag>
        <tag>Github Action</tag>
      </tags>
  </entry>
</search>
